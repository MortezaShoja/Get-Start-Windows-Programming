'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAll
    Inherits DataSet
    
    Private tableauthors As authorsDataTable
    
    Private tabletitleauthor As titleauthorDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("authors")) Is Nothing) Then
                Me.Tables.Add(New authorsDataTable(ds.Tables("authors")))
            End If
            If (Not (ds.Tables("titleauthor")) Is Nothing) Then
                Me.Tables.Add(New titleauthorDataTable(ds.Tables("titleauthor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property authors As authorsDataTable
        Get
            Return Me.tableauthors
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property titleauthor As titleauthorDataTable
        Get
            Return Me.tabletitleauthor
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAll = CType(MyBase.Clone,dsAll)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("authors")) Is Nothing) Then
            Me.Tables.Add(New authorsDataTable(ds.Tables("authors")))
        End If
        If (Not (ds.Tables("titleauthor")) Is Nothing) Then
            Me.Tables.Add(New titleauthorDataTable(ds.Tables("titleauthor")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableauthors = CType(Me.Tables("authors"),authorsDataTable)
        If (Not (Me.tableauthors) Is Nothing) Then
            Me.tableauthors.InitVars
        End If
        Me.tabletitleauthor = CType(Me.Tables("titleauthor"),titleauthorDataTable)
        If (Not (Me.tabletitleauthor) Is Nothing) Then
            Me.tabletitleauthor.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAll"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsAll.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableauthors = New authorsDataTable
        Me.Tables.Add(Me.tableauthors)
        Me.tabletitleauthor = New titleauthorDataTable
        Me.Tables.Add(Me.tabletitleauthor)
    End Sub
    
    Private Function ShouldSerializeauthors() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetitleauthor() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub authorsRowChangeEventHandler(ByVal sender As Object, ByVal e As authorsRowChangeEvent)
    
    Public Delegate Sub titleauthorRowChangeEventHandler(ByVal sender As Object, ByVal e As titleauthorRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class authorsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnau_id As DataColumn
        
        Friend Sub New()
            MyBase.New("authors")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property au_idColumn As DataColumn
            Get
                Return Me.columnau_id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As authorsRow
            Get
                Return CType(Me.Rows(index),authorsRow)
            End Get
        End Property
        
        Public Event authorsRowChanged As authorsRowChangeEventHandler
        
        Public Event authorsRowChanging As authorsRowChangeEventHandler
        
        Public Event authorsRowDeleted As authorsRowChangeEventHandler
        
        Public Event authorsRowDeleting As authorsRowChangeEventHandler
        
        Public Overloads Sub AddauthorsRow(ByVal row As authorsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddauthorsRow(ByVal au_id As String) As authorsRow
            Dim rowauthorsRow As authorsRow = CType(Me.NewRow,authorsRow)
            rowauthorsRow.ItemArray = New Object() {au_id}
            Me.Rows.Add(rowauthorsRow)
            Return rowauthorsRow
        End Function
        
        Public Function FindByau_id(ByVal au_id As String) As authorsRow
            Return CType(Me.Rows.Find(New Object() {au_id}),authorsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As authorsDataTable = CType(MyBase.Clone,authorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New authorsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnau_id = Me.Columns("au_id")
        End Sub
        
        Private Sub InitClass()
            Me.columnau_id = New DataColumn("au_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnau_id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnau_id}, true))
            Me.columnau_id.AllowDBNull = false
            Me.columnau_id.Unique = true
        End Sub
        
        Public Function NewauthorsRow() As authorsRow
            Return CType(Me.NewRow,authorsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New authorsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(authorsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.authorsRowChangedEvent) Is Nothing) Then
                RaiseEvent authorsRowChanged(Me, New authorsRowChangeEvent(CType(e.Row,authorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.authorsRowChangingEvent) Is Nothing) Then
                RaiseEvent authorsRowChanging(Me, New authorsRowChangeEvent(CType(e.Row,authorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.authorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent authorsRowDeleted(Me, New authorsRowChangeEvent(CType(e.Row,authorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.authorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent authorsRowDeleting(Me, New authorsRowChangeEvent(CType(e.Row,authorsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveauthorsRow(ByVal row As authorsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class authorsRow
        Inherits DataRow
        
        Private tableauthors As authorsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableauthors = CType(Me.Table,authorsDataTable)
        End Sub
        
        Public Property au_id As String
            Get
                Return CType(Me(Me.tableauthors.au_idColumn),String)
            End Get
            Set
                Me(Me.tableauthors.au_idColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class authorsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As authorsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As authorsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As authorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class titleauthorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnau_id As DataColumn
        
        Private columntitle_id As DataColumn
        
        Private columnau_ord As DataColumn
        
        Private columnroyaltyper As DataColumn
        
        Friend Sub New()
            MyBase.New("titleauthor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property au_idColumn As DataColumn
            Get
                Return Me.columnau_id
            End Get
        End Property
        
        Friend ReadOnly Property title_idColumn As DataColumn
            Get
                Return Me.columntitle_id
            End Get
        End Property
        
        Friend ReadOnly Property au_ordColumn As DataColumn
            Get
                Return Me.columnau_ord
            End Get
        End Property
        
        Friend ReadOnly Property royaltyperColumn As DataColumn
            Get
                Return Me.columnroyaltyper
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As titleauthorRow
            Get
                Return CType(Me.Rows(index),titleauthorRow)
            End Get
        End Property
        
        Public Event titleauthorRowChanged As titleauthorRowChangeEventHandler
        
        Public Event titleauthorRowChanging As titleauthorRowChangeEventHandler
        
        Public Event titleauthorRowDeleted As titleauthorRowChangeEventHandler
        
        Public Event titleauthorRowDeleting As titleauthorRowChangeEventHandler
        
        Public Overloads Sub AddtitleauthorRow(ByVal row As titleauthorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtitleauthorRow(ByVal au_id As String, ByVal title_id As String, ByVal au_ord As Byte, ByVal royaltyper As Integer) As titleauthorRow
            Dim rowtitleauthorRow As titleauthorRow = CType(Me.NewRow,titleauthorRow)
            rowtitleauthorRow.ItemArray = New Object() {au_id, title_id, au_ord, royaltyper}
            Me.Rows.Add(rowtitleauthorRow)
            Return rowtitleauthorRow
        End Function
        
        Public Function FindByau_idtitle_id(ByVal au_id As String, ByVal title_id As String) As titleauthorRow
            Return CType(Me.Rows.Find(New Object() {au_id, title_id}),titleauthorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As titleauthorDataTable = CType(MyBase.Clone,titleauthorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New titleauthorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnau_id = Me.Columns("au_id")
            Me.columntitle_id = Me.Columns("title_id")
            Me.columnau_ord = Me.Columns("au_ord")
            Me.columnroyaltyper = Me.Columns("royaltyper")
        End Sub
        
        Private Sub InitClass()
            Me.columnau_id = New DataColumn("au_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnau_id)
            Me.columntitle_id = New DataColumn("title_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntitle_id)
            Me.columnau_ord = New DataColumn("au_ord", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnau_ord)
            Me.columnroyaltyper = New DataColumn("royaltyper", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnroyaltyper)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnau_id, Me.columntitle_id}, true))
            Me.columnau_id.AllowDBNull = false
            Me.columntitle_id.AllowDBNull = false
        End Sub
        
        Public Function NewtitleauthorRow() As titleauthorRow
            Return CType(Me.NewRow,titleauthorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New titleauthorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(titleauthorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.titleauthorRowChangedEvent) Is Nothing) Then
                RaiseEvent titleauthorRowChanged(Me, New titleauthorRowChangeEvent(CType(e.Row,titleauthorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.titleauthorRowChangingEvent) Is Nothing) Then
                RaiseEvent titleauthorRowChanging(Me, New titleauthorRowChangeEvent(CType(e.Row,titleauthorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.titleauthorRowDeletedEvent) Is Nothing) Then
                RaiseEvent titleauthorRowDeleted(Me, New titleauthorRowChangeEvent(CType(e.Row,titleauthorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.titleauthorRowDeletingEvent) Is Nothing) Then
                RaiseEvent titleauthorRowDeleting(Me, New titleauthorRowChangeEvent(CType(e.Row,titleauthorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetitleauthorRow(ByVal row As titleauthorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class titleauthorRow
        Inherits DataRow
        
        Private tabletitleauthor As titleauthorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletitleauthor = CType(Me.Table,titleauthorDataTable)
        End Sub
        
        Public Property au_id As String
            Get
                Return CType(Me(Me.tabletitleauthor.au_idColumn),String)
            End Get
            Set
                Me(Me.tabletitleauthor.au_idColumn) = value
            End Set
        End Property
        
        Public Property title_id As String
            Get
                Return CType(Me(Me.tabletitleauthor.title_idColumn),String)
            End Get
            Set
                Me(Me.tabletitleauthor.title_idColumn) = value
            End Set
        End Property
        
        Public Property au_ord As Byte
            Get
                Try 
                    Return CType(Me(Me.tabletitleauthor.au_ordColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletitleauthor.au_ordColumn) = value
            End Set
        End Property
        
        Public Property royaltyper As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletitleauthor.royaltyperColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletitleauthor.royaltyperColumn) = value
            End Set
        End Property
        
        Public Function Isau_ordNull() As Boolean
            Return Me.IsNull(Me.tabletitleauthor.au_ordColumn)
        End Function
        
        Public Sub Setau_ordNull()
            Me(Me.tabletitleauthor.au_ordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsroyaltyperNull() As Boolean
            Return Me.IsNull(Me.tabletitleauthor.royaltyperColumn)
        End Function
        
        Public Sub SetroyaltyperNull()
            Me(Me.tabletitleauthor.royaltyperColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class titleauthorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As titleauthorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As titleauthorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As titleauthorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
