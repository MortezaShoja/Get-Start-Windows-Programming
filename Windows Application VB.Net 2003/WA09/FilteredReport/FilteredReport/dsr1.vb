'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2300
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsr1
    Inherits DataSet
    
    Private tableFaktor As FaktorDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Faktor")) Is Nothing) Then
                Me.Tables.Add(New FaktorDataTable(ds.Tables("Faktor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Faktor As FaktorDataTable
        Get
            Return Me.tableFaktor
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsr1 = CType(MyBase.Clone,dsr1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Faktor")) Is Nothing) Then
            Me.Tables.Add(New FaktorDataTable(ds.Tables("Faktor")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableFaktor = CType(Me.Tables("Faktor"),FaktorDataTable)
        If (Not (Me.tableFaktor) Is Nothing) Then
            Me.tableFaktor.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsr1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsr1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("fa-IR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableFaktor = New FaktorDataTable
        Me.Tables.Add(Me.tableFaktor)
    End Sub
    
    Private Function ShouldSerializeFaktor() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub FaktorRowChangeEventHandler(ByVal sender As Object, ByVal e As FaktorRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FaktorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnShomareFaktor As DataColumn
        
        Private columnName As DataColumn
        
        Private columnLname As DataColumn
        
        Private columnPesonaliNo As DataColumn
        
        Private columnShomareParvande As DataColumn
        
        Private columnSharhekhadamat As DataColumn
        
        Private columnTarikh As DataColumn
        
        Private columnHazinekhadamat As DataColumn
        
        Private columnHazinelabratuar As DataColumn
        
        Private columnNameDandanpezeshk As DataColumn
        
        Private columnnoekhadamat As DataColumn
        
        Private columnteded As DataColumn
        
        Private columnmoaref As DataColumn
        
        Private columnsharhh As DataColumn
        
        Private columnsahmedentist As DataColumn
        
        Private columnnoetarefe As DataColumn
        
        Private columnDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Faktor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ShomareFaktorColumn As DataColumn
            Get
                Return Me.columnShomareFaktor
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property LnameColumn As DataColumn
            Get
                Return Me.columnLname
            End Get
        End Property
        
        Friend ReadOnly Property PesonaliNoColumn As DataColumn
            Get
                Return Me.columnPesonaliNo
            End Get
        End Property
        
        Friend ReadOnly Property ShomareParvandeColumn As DataColumn
            Get
                Return Me.columnShomareParvande
            End Get
        End Property
        
        Friend ReadOnly Property SharhekhadamatColumn As DataColumn
            Get
                Return Me.columnSharhekhadamat
            End Get
        End Property
        
        Friend ReadOnly Property TarikhColumn As DataColumn
            Get
                Return Me.columnTarikh
            End Get
        End Property
        
        Friend ReadOnly Property HazinekhadamatColumn As DataColumn
            Get
                Return Me.columnHazinekhadamat
            End Get
        End Property
        
        Friend ReadOnly Property HazinelabratuarColumn As DataColumn
            Get
                Return Me.columnHazinelabratuar
            End Get
        End Property
        
        Friend ReadOnly Property NameDandanpezeshkColumn As DataColumn
            Get
                Return Me.columnNameDandanpezeshk
            End Get
        End Property
        
        Friend ReadOnly Property noekhadamatColumn As DataColumn
            Get
                Return Me.columnnoekhadamat
            End Get
        End Property
        
        Friend ReadOnly Property tededColumn As DataColumn
            Get
                Return Me.columnteded
            End Get
        End Property
        
        Friend ReadOnly Property moarefColumn As DataColumn
            Get
                Return Me.columnmoaref
            End Get
        End Property
        
        Friend ReadOnly Property sharhhColumn As DataColumn
            Get
                Return Me.columnsharhh
            End Get
        End Property
        
        Friend ReadOnly Property sahmedentistColumn As DataColumn
            Get
                Return Me.columnsahmedentist
            End Get
        End Property
        
        Friend ReadOnly Property noetarefeColumn As DataColumn
            Get
                Return Me.columnnoetarefe
            End Get
        End Property
        
        Friend ReadOnly Property DeletedColumn As DataColumn
            Get
                Return Me.columnDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FaktorRow
            Get
                Return CType(Me.Rows(index),FaktorRow)
            End Get
        End Property
        
        Public Event FaktorRowChanged As FaktorRowChangeEventHandler
        
        Public Event FaktorRowChanging As FaktorRowChangeEventHandler
        
        Public Event FaktorRowDeleted As FaktorRowChangeEventHandler
        
        Public Event FaktorRowDeleting As FaktorRowChangeEventHandler
        
        Public Overloads Sub AddFaktorRow(ByVal row As FaktorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFaktorRow( _
                    ByVal ShomareFaktor As Integer,  _
                    ByVal Name As String,  _
                    ByVal Lname As String,  _
                    ByVal PesonaliNo As String,  _
                    ByVal ShomareParvande As String,  _
                    ByVal Sharhekhadamat As String,  _
                    ByVal Tarikh As String,  _
                    ByVal Hazinekhadamat As Integer,  _
                    ByVal Hazinelabratuar As Integer,  _
                    ByVal NameDandanpezeshk As String,  _
                    ByVal noekhadamat As String,  _
                    ByVal teded As Integer,  _
                    ByVal moaref As String,  _
                    ByVal sharhh As String,  _
                    ByVal sahmedentist As Integer,  _
                    ByVal noetarefe As String,  _
                    ByVal Deleted As Boolean) As FaktorRow
            Dim rowFaktorRow As FaktorRow = CType(Me.NewRow,FaktorRow)
            rowFaktorRow.ItemArray = New Object() {ShomareFaktor, Name, Lname, PesonaliNo, ShomareParvande, Sharhekhadamat, Tarikh, Hazinekhadamat, Hazinelabratuar, NameDandanpezeshk, noekhadamat, teded, moaref, sharhh, sahmedentist, noetarefe, Deleted}
            Me.Rows.Add(rowFaktorRow)
            Return rowFaktorRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FaktorDataTable = CType(MyBase.Clone,FaktorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FaktorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnShomareFaktor = Me.Columns("ShomareFaktor")
            Me.columnName = Me.Columns("Name")
            Me.columnLname = Me.Columns("Lname")
            Me.columnPesonaliNo = Me.Columns("PesonaliNo")
            Me.columnShomareParvande = Me.Columns("ShomareParvande")
            Me.columnSharhekhadamat = Me.Columns("Sharhekhadamat")
            Me.columnTarikh = Me.Columns("Tarikh")
            Me.columnHazinekhadamat = Me.Columns("Hazinekhadamat")
            Me.columnHazinelabratuar = Me.Columns("Hazinelabratuar")
            Me.columnNameDandanpezeshk = Me.Columns("NameDandanpezeshk")
            Me.columnnoekhadamat = Me.Columns("noekhadamat")
            Me.columnteded = Me.Columns("teded")
            Me.columnmoaref = Me.Columns("moaref")
            Me.columnsharhh = Me.Columns("sharhh")
            Me.columnsahmedentist = Me.Columns("sahmedentist")
            Me.columnnoetarefe = Me.Columns("noetarefe")
            Me.columnDeleted = Me.Columns("Deleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnShomareFaktor = New DataColumn("ShomareFaktor", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShomareFaktor)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnLname = New DataColumn("Lname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLname)
            Me.columnPesonaliNo = New DataColumn("PesonaliNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPesonaliNo)
            Me.columnShomareParvande = New DataColumn("ShomareParvande", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShomareParvande)
            Me.columnSharhekhadamat = New DataColumn("Sharhekhadamat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSharhekhadamat)
            Me.columnTarikh = New DataColumn("Tarikh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarikh)
            Me.columnHazinekhadamat = New DataColumn("Hazinekhadamat", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHazinekhadamat)
            Me.columnHazinelabratuar = New DataColumn("Hazinelabratuar", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHazinelabratuar)
            Me.columnNameDandanpezeshk = New DataColumn("NameDandanpezeshk", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameDandanpezeshk)
            Me.columnnoekhadamat = New DataColumn("noekhadamat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnoekhadamat)
            Me.columnteded = New DataColumn("teded", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnteded)
            Me.columnmoaref = New DataColumn("moaref", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmoaref)
            Me.columnsharhh = New DataColumn("sharhh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsharhh)
            Me.columnsahmedentist = New DataColumn("sahmedentist", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsahmedentist)
            Me.columnnoetarefe = New DataColumn("noetarefe", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnoetarefe)
            Me.columnDeleted = New DataColumn("Deleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeleted)
            Me.columnDeleted.AllowDBNull = false
        End Sub
        
        Public Function NewFaktorRow() As FaktorRow
            Return CType(Me.NewRow,FaktorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FaktorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FaktorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FaktorRowChangedEvent) Is Nothing) Then
                RaiseEvent FaktorRowChanged(Me, New FaktorRowChangeEvent(CType(e.Row,FaktorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FaktorRowChangingEvent) Is Nothing) Then
                RaiseEvent FaktorRowChanging(Me, New FaktorRowChangeEvent(CType(e.Row,FaktorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FaktorRowDeletedEvent) Is Nothing) Then
                RaiseEvent FaktorRowDeleted(Me, New FaktorRowChangeEvent(CType(e.Row,FaktorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FaktorRowDeletingEvent) Is Nothing) Then
                RaiseEvent FaktorRowDeleting(Me, New FaktorRowChangeEvent(CType(e.Row,FaktorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFaktorRow(ByVal row As FaktorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FaktorRow
        Inherits DataRow
        
        Private tableFaktor As FaktorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFaktor = CType(Me.Table,FaktorDataTable)
        End Sub
        
        Public Property ShomareFaktor As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.ShomareFaktorColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.ShomareFaktorColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.NameColumn) = value
            End Set
        End Property
        
        Public Property Lname As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.LnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.LnameColumn) = value
            End Set
        End Property
        
        Public Property PesonaliNo As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.PesonaliNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.PesonaliNoColumn) = value
            End Set
        End Property
        
        Public Property ShomareParvande As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.ShomareParvandeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.ShomareParvandeColumn) = value
            End Set
        End Property
        
        Public Property Sharhekhadamat As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.SharhekhadamatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.SharhekhadamatColumn) = value
            End Set
        End Property
        
        Public Property Tarikh As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.TarikhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.TarikhColumn) = value
            End Set
        End Property
        
        Public Property Hazinekhadamat As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.HazinekhadamatColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.HazinekhadamatColumn) = value
            End Set
        End Property
        
        Public Property Hazinelabratuar As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.HazinelabratuarColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.HazinelabratuarColumn) = value
            End Set
        End Property
        
        Public Property NameDandanpezeshk As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.NameDandanpezeshkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.NameDandanpezeshkColumn) = value
            End Set
        End Property
        
        Public Property noekhadamat As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.noekhadamatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.noekhadamatColumn) = value
            End Set
        End Property
        
        Public Property teded As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.tededColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.tededColumn) = value
            End Set
        End Property
        
        Public Property moaref As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.moarefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.moarefColumn) = value
            End Set
        End Property
        
        Public Property sharhh As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.sharhhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.sharhhColumn) = value
            End Set
        End Property
        
        Public Property sahmedentist As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.sahmedentistColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.sahmedentistColumn) = value
            End Set
        End Property
        
        Public Property noetarefe As String
            Get
                Try 
                    Return CType(Me(Me.tableFaktor.noetarefeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFaktor.noetarefeColumn) = value
            End Set
        End Property
        
        Public Property Deleted As Boolean
            Get
                Return CType(Me(Me.tableFaktor.DeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFaktor.DeletedColumn) = value
            End Set
        End Property
        
        Public Function IsShomareFaktorNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.ShomareFaktorColumn)
        End Function
        
        Public Sub SetShomareFaktorNull()
            Me(Me.tableFaktor.ShomareFaktorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableFaktor.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLnameNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.LnameColumn)
        End Function
        
        Public Sub SetLnameNull()
            Me(Me.tableFaktor.LnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPesonaliNoNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.PesonaliNoColumn)
        End Function
        
        Public Sub SetPesonaliNoNull()
            Me(Me.tableFaktor.PesonaliNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShomareParvandeNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.ShomareParvandeColumn)
        End Function
        
        Public Sub SetShomareParvandeNull()
            Me(Me.tableFaktor.ShomareParvandeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSharhekhadamatNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.SharhekhadamatColumn)
        End Function
        
        Public Sub SetSharhekhadamatNull()
            Me(Me.tableFaktor.SharhekhadamatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTarikhNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.TarikhColumn)
        End Function
        
        Public Sub SetTarikhNull()
            Me(Me.tableFaktor.TarikhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHazinekhadamatNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.HazinekhadamatColumn)
        End Function
        
        Public Sub SetHazinekhadamatNull()
            Me(Me.tableFaktor.HazinekhadamatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHazinelabratuarNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.HazinelabratuarColumn)
        End Function
        
        Public Sub SetHazinelabratuarNull()
            Me(Me.tableFaktor.HazinelabratuarColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameDandanpezeshkNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.NameDandanpezeshkColumn)
        End Function
        
        Public Sub SetNameDandanpezeshkNull()
            Me(Me.tableFaktor.NameDandanpezeshkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoekhadamatNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.noekhadamatColumn)
        End Function
        
        Public Sub SetnoekhadamatNull()
            Me(Me.tableFaktor.noekhadamatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstededNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.tededColumn)
        End Function
        
        Public Sub SettededNull()
            Me(Me.tableFaktor.tededColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmoarefNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.moarefColumn)
        End Function
        
        Public Sub SetmoarefNull()
            Me(Me.tableFaktor.moarefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssharhhNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.sharhhColumn)
        End Function
        
        Public Sub SetsharhhNull()
            Me(Me.tableFaktor.sharhhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssahmedentistNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.sahmedentistColumn)
        End Function
        
        Public Sub SetsahmedentistNull()
            Me(Me.tableFaktor.sahmedentistColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnoetarefeNull() As Boolean
            Return Me.IsNull(Me.tableFaktor.noetarefeColumn)
        End Function
        
        Public Sub SetnoetarefeNull()
            Me(Me.tableFaktor.noetarefeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FaktorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FaktorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FaktorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FaktorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
